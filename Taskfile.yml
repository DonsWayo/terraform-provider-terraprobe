version: '3'

vars:
  GOOS:
    sh: go env GOOS
  GOARCH:
    sh: go env GOARCH
  PROVIDER_NAME: terraform-provider-terraprobe
  PLUGIN_DIR: '{{.HOME}}/.terraform.d/plugins/registry.terraform.io/hashicorp/terraprobe/0.1.0/{{.GOOS}}_{{.GOARCH}}'
  TEST_CONFIG_DIR: test-config

tasks:
  default:
    desc: Build, install, and run all tests
    cmds:
      - task: fmt
      - task: lint
      - task: install
      - task: test:all

  check-docker:
    desc: Check if Docker is available
    cmds:
      - |
        if command -v docker &> /dev/null; then
          if docker info &> /dev/null 2>&1; then
            echo "✓ Docker is available and running"
          else
            echo "⚠ Docker is installed but not running. Some database tests may fail."
            exit 1
          fi
        else
          echo "⚠ Docker is not installed. Some database tests may fail."
          exit 1
        fi
    silent: true

  build:
    desc: Build the provider
    cmds:
      - echo "Building provider for {{.GOOS}}/{{.GOARCH}}..."
      - go build -v -o {{.PROVIDER_NAME}}
    sources:
      - '**/*.go'
      - go.mod
      - go.sum
    generates:
      - '{{.PROVIDER_NAME}}'

  install:
    desc: Build and install the provider locally
    deps:
      - build
    cmds:
      - echo "Installing provider to {{.PLUGIN_DIR}}..."
      - mkdir -p {{.PLUGIN_DIR}}
      - cp {{.PROVIDER_NAME}} {{.PLUGIN_DIR}}/
      - echo "✓ Provider installed successfully"

  fmt:
    desc: Format Go code
    cmds:
      - gofmt -s -w -e .

  lint:
    desc: Run golangci-lint
    cmds:
      - golangci-lint run

  generate:
    desc: Generate provider documentation
    cmds:
      - cd tools && go generate ./...

  test:unit:
    desc: Run unit tests
    deps:
      - check-docker
    cmds:
      - echo "Running unit tests..."
      - go test -v -cover -timeout=120s -parallel=10 ./internal/provider/...

  test:acc:
    desc: Run acceptance tests (requires TF_ACC=1)
    deps:
      - check-docker
    env:
      TF_ACC: "1"
    cmds:
      - echo "Running acceptance tests..."
      - go test -v -cover -timeout 120m ./internal/provider/

  terraform:init:
    desc: Initialize Terraform in test-config directory
    dir: '{{.TEST_CONFIG_DIR}}'
    cmds:
      - rm -rf .terraform .terraform.lock.hcl
      - terraform init

  terraform:plan:
    desc: Run Terraform plan
    dir: '{{.TEST_CONFIG_DIR}}'
    deps:
      - install
    cmds:
      - terraform plan

  terraform:apply:
    desc: Run Terraform apply to test the provider
    dir: '{{.TEST_CONFIG_DIR}}'
    deps:
      - install
    cmds:
      - echo "Initializing Terraform..."
      - terraform init
      - echo "Running Terraform apply..."
      - terraform apply -auto-approve
      - echo ""
      - echo "Test Results:"
      - terraform output

  terraform:destroy:
    desc: Destroy Terraform resources
    dir: '{{.TEST_CONFIG_DIR}}'
    cmds:
      - terraform destroy -auto-approve

  terraform:clean:
    desc: Clean Terraform state and cache
    dir: '{{.TEST_CONFIG_DIR}}'
    cmds:
      - rm -rf .terraform .terraform.lock.hcl terraform.tfstate terraform.tfstate.backup

  test:all:
    desc: Run unit tests and Terraform integration tests
    cmds:
      - task: test:unit
      - task: terraform:apply

  db:start:
    desc: Start PostgreSQL and MySQL containers for testing
    cmds:
      - echo "Starting PostgreSQL 17 container..."
      - docker run -d --name terraprobe-postgres -e POSTGRES_PASSWORD=postgres -p 5432:5432 postgres:17-alpine || echo "PostgreSQL container already exists"
      - echo "Starting MySQL 8.4 LTS container..."
      - docker run -d --name terraprobe-mysql -e MYSQL_ROOT_PASSWORD=mysql -e MYSQL_DATABASE=mysql -p 3306:3306 mysql:8.4 || echo "MySQL container already exists"
      - echo "Waiting for databases to be ready..."
      - sleep 10
      - echo "✓ Database containers started (PostgreSQL 17, MySQL 8.4 LTS)"

  db:stop:
    desc: Stop and remove database containers
    cmds:
      - echo "Stopping and removing database containers..."
      - docker stop terraprobe-postgres terraprobe-mysql 2>/dev/null || true
      - docker rm terraprobe-postgres terraprobe-mysql 2>/dev/null || true
      - echo "✓ Database containers stopped and removed"

  db:logs:
    desc: Show database container logs
    cmds:
      - echo "=== PostgreSQL logs ==="
      - docker logs terraprobe-postgres --tail 50
      - echo ""
      - echo "=== MySQL logs ==="
      - docker logs terraprobe-mysql --tail 50

  db:status:
    desc: Check status of database containers
    cmds:
      - docker ps -a --filter "name=terraprobe-" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

  test:integration:
    desc: Run full integration tests with databases
    cmds:
      - task: db:start
      - defer: task db:stop
      - task: terraform:clean
      - task: terraform:apply

  clean:
    desc: Clean build artifacts and test files
    cmds:
      - rm -f {{.PROVIDER_NAME}}
      - rm -rf {{.TEST_CONFIG_DIR}}/.terraform
      - rm -rf {{.TEST_CONFIG_DIR}}/.terraform.lock.hcl
      - rm -rf {{.TEST_CONFIG_DIR}}/terraform.tfstate*
      - echo "✓ Cleaned build artifacts"

  show-config:
    desc: Show current configuration
    cmds:
      - echo "GOOS={{.GOOS}}"
      - echo "GOARCH={{.GOARCH}}"
      - echo "PLUGIN_DIR={{.PLUGIN_DIR}}"
      - echo "PROVIDER_NAME={{.PROVIDER_NAME}}"
    silent: true
